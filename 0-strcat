STRCAT(3)                                                         Linux Programmer's Manual                                                        STRCAT(3)

NNAAMMEE
       strcat, strncat - concatenate two strings

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssttrriinngg..hh>>

       cchhaarr **ssttrrccaatt((cchhaarr **_d_e_s_t,, ccoonnsstt cchhaarr **_s_r_c));;

       cchhaarr **ssttrrnnccaatt((cchhaarr **_d_e_s_t,, ccoonnsstt cchhaarr **_s_r_c,, ssiizzee__tt _n));;

DDEESSCCRRIIPPTTIIOONN
       The  ssttrrccaatt()  function  appends  the _s_r_c string to the _d_e_s_t string, overwriting the terminating null byte ('\0') at the end of _d_e_s_t, and then adds a
       terminating null byte.  The strings may not overlap, and the _d_e_s_t string must have enough space for the result.  If _d_e_s_t is not large enough, program
       behavior is unpredictable; _b_u_f_f_e_r _o_v_e_r_r_u_n_s _a_r_e _a _f_a_v_o_r_i_t_e _a_v_e_n_u_e _f_o_r _a_t_t_a_c_k_i_n_g _s_e_c_u_r_e _p_r_o_g_r_a_m_s.

       The ssttrrnnccaatt() function is similar, except that

       *  it will use at most _n bytes from _s_r_c; and

       *  _s_r_c does not need to be null-terminated if it contains _n or more bytes.

       As with ssttrrccaatt(), the resulting string in _d_e_s_t is always null-terminated.

       If _s_r_c contains _n or more bytes, ssttrrnnccaatt() writes _n_+_1 bytes to _d_e_s_t (_n from _s_r_c plus the terminating null byte).  Therefore, the size of _d_e_s_t must be
       at least _s_t_r_l_e_n_(_d_e_s_t_)_+_n_+_1.

       A simple implementation of ssttrrnnccaatt() might be:

           char *
           strncat(char *dest, const char *src, size_t n)
           {
               size_t dest_len = strlen(dest);
               size_t i;

               for (i = 0 ; i < n && src[i] != '\0' ; i++)
                   dest[dest_len + i] = src[i];
               dest[dest_len + i] = '\0';

               return dest;
           }

RREETTUURRNN VVAALLUUEE
       The ssttrrccaatt() and ssttrrnnccaatt() functions return a pointer to the resulting string _d_e_s_t.

AATTTTRRIIBBUUTTEESS
       For an explanation of the terms used in this section, see aattttrriibbuutteess(7).

       ┌────────────────────┬───────────────┬─────────┐
       │IInntteerrffaaccee           │ AAttttrriibbuuttee     │ VVaalluuee   │
       ├────────────────────┼───────────────┼─────────┤
       │ssttrrccaatt(), ssttrrnnccaatt() │ Thread safety │ MT-Safe │
       └────────────────────┴───────────────┴─────────┘
CCOONNFFOORRMMIINNGG TTOO
       POSIX.1-2001, POSIX.1-2008, C89, C99, SVr4, 4.3BSD.

NNOOTTEESS
       Some systems (the BSDs, Solaris, and others) provide the following function:

           size_t strlcat(char *dest, const char *src, size_t size);

       This function appends the null-terminated string _s_r_c to the string _d_e_s_t, copying at most _s_i_z_e_-_s_t_r_l_e_n_(_d_e_s_t_)_-_1 from _s_r_c, and adds  a  terminating  null
       byte  to  the  result,  _u_n_l_e_s_s _s_i_z_e is less than _s_t_r_l_e_n_(_d_e_s_t_).  This function fixes the buffer overrun problem of ssttrrccaatt(), but the caller must still
       handle the possibility of data loss if _s_i_z_e is too small.  The function returns the length of the string ssttrrllccaatt() tried to  create;  if  the  return
       value  is  greater  than  or equal to _s_i_z_e, data loss occurred.  If data loss matters, the caller _m_u_s_t either check the arguments before the call, or
       test the function return value.  ssttrrllccaatt() is not present in glibc and is not standardized by POSIX, but is available on Linux  via  the  _l_i_b_b_s_d  li‐
       brary.

EEXXAAMMPPLLEESS
       Because ssttrrccaatt() and ssttrrnnccaatt() must find the null byte that terminates the string _d_e_s_t using a search that starts at the beginning of the string, the
       execution time of these functions scales according to the length of the string _d_e_s_t.  This can be demonstrated by running the program below.  (If the
       goal  is to concatenate many strings to one target, then manually copying the bytes from each source string while maintaining a pointer to the end of
       the target string will provide better performance.)

   PPrrooggrraamm ssoouurrccee

       #include <stdint.h>
       #include <string.h>
       #include <time.h>
       #include <stdio.h>

       int
       main(int argc, char *argv[])
       {
       #define LIM 4000000
           char p[LIM + 1];    /* +1 for terminating null byte */
           time_t base;

           base = time(NULL);
           p[0] = '\0';

           for (int j = 0; j < LIM; j++) {
               if ((j % 10000) == 0)
                   printf("%d %jd\n", j, (intmax_t) (time(NULL) - base));
               strcat(p, "a");
           }
       }

SSEEEE AALLSSOO
       bbccooppyy(3), mmeemmccccppyy(3), mmeemmccppyy(3), ssttrrccppyy(3), ssttrriinngg(3), ssttrrnnccppyy(3), wwccssccaatt(3), wwccssnnccaatt(3)

CCOOLLOOPPHHOONN
       This page is part of release 5.10 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the project, information about reporting  bugs,  and  the  latest
       version of this page, can be found at https://www.kernel.org/doc/man-pages/.

GNU                                                                      2020-11-01                                                                STRCAT(3)
